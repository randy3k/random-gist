#!/usr/bin/env python

import re
import subprocess
import sys

RELEASE_REGEXP = re.compile(r"^([0-9A-Za-z-]*[A-Za-z-])?([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9]+))?$")


def smart_incremented_tag(tag, release_type):
    """
    Automatic increment of a given tag depending on the type of release.

    >>> smart_incremented_tag('v1.3.2', "prerelease") == 'v1.3.3-0'
    >>> smart_incremented_tag('v1.3.2', "prepatch") == 'v1.3.3-0'
    >>> smart_incremented_tag('v1.3.2', "preminor") == 'v1.4.0-0'
    >>> smart_incremented_tag('v1.3.2', "premajor") == 'v2.0.0-0'
    >>> smart_incremented_tag('v1.3.2', "patch") == 'v1.3.3'
    >>> smart_incremented_tag('v1.3.2', "minor") == 'v1.4.0'
    >>> smart_incremented_tag('v1.3.2', "major") == 'v2.0.0'
    >>> smart_incremented_tag('v1.3.2-1', "prerelease") == 'v1.3.2-2'
    >>> smart_incremented_tag('v1.3.2-1', "prepatch") == 'v1.3.3-0'
    >>> smart_incremented_tag('v1.3.2-1', "preminor") == 'v1.4.0-0'
    >>> smart_incremented_tag('v1.3.2-1', "premajor") == 'v2.0.0-0'
    >>> smart_incremented_tag('v1.3.2-1', "patch") == 'v1.3.2'
    >>> smart_incremented_tag('v1.3.2-1', "minor") == 'v1.4.0'
    >>> smart_incremented_tag('v1.3.2-1', "major") == 'v2.0.0'
    >>> smart_incremented_tag('v1.3.0-1', "patch") == 'v1.3.0'
    >>> smart_incremented_tag('v1.3.0-1', "minor") == 'v1.3.0'
    >>> smart_incremented_tag('v1.3.0-1', "major") == 'v2.0.0'
    >>> smart_incremented_tag('v1.0.0-1', "major") == 'v1.0.0'

    """

    m = RELEASE_REGEXP.match(tag)
    if m:
        prefix, major, minor, patch, prerelease = m.groups()
        prefix = "" if not prefix else prefix

        if release_type == "premajor" \
                or (not prerelease and release_type == "major") \
                or (prerelease and release_type == "major" and (minor != "0" or patch != "0")):
            major = str(int(major)+1)
            minor = patch = "0"
            prerelease = None
        elif release_type == "preminor" \
                or (not prerelease and release_type == "minor") \
                or (prerelease and release_type == "minor" and patch != "0"):
            minor = str(int(minor)+1)
            patch = "0"
            prerelease = None
        elif release_type == "prepatch" \
                or (not prerelease and release_type == "prerelease") \
                or (not prerelease and release_type == "patch"):
            patch = str(int(patch)+1)
            prerelease = None

        if "pre" in release_type[0:3]:
            prerelease = str(int(prerelease)+1) if prerelease else "0"
            return prefix + major + "." + minor + "." + patch + "-" + prerelease
        else:
            return prefix + major + "." + minor + "." + patch

    return None


def stop(str):
    print(str)
    sys.exit(0)


def git(args, throw_error=False):
    p = subprocess.Popen(["git"]+args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    p.wait()
    out, err = p.communicate()
    if out:
        out = out.decode("utf-8").strip()
    if err and throw_error:
        err = err.decode("utf-8").strip()
        if err:
            stop(err)
    return out


def main():
    releast_type = sys.argv[1]

    if releast_type not in [
        "major",
        "minor",
        "patch",
        "premajor",
        "preminor",
        "prepatch",
        "prerelease"
    ]:
        stop("Invalid release type: %s." % releast_type)

    lastest_tag = git(["describe", "--tags", "--abbrev=0"])

    if not lastest_tag:
        lastest_tag = "v0.0.0"

    next_tag = smart_incremented_tag(lastest_tag, releast_type)

    if not next_tag:
        stop("Cannot parse lastest tag: %s" % lastest_tag)

    git(["tag", "-a", next_tag, "-m", "Version %s" % next_tag], throw_error=True)
    print("Tag '%s'!" % next_tag)


if __name__ == "__main__":
    main()
